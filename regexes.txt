input      = INPUT (STR|Str|str|STRING|String|string|INT|Int|int|INTEGER|Integer|integer|FLOAT|Float|float|REAL|Real|real|NUMBER|Number|number|BOOL|Bool|bool|BOOLEAN|Boolean|boolean|COMPLEX|Complex|complex) .*?( |\n)
output     = OUTPUT (["']).*?(?<!\\)\1|RAW (.*)
create     = CREATE ([a-zA-Z_][a-zA-Z0-9_]*) (WITH (.*? )+)?
cast       = CAST ([a-zA-Z_][a-zA-Z0-9_]*) .*
call       = CALL (([a-zA-Z_][a-zA-Z0-9_]* (WITH .+)?)|((((ANONP|ANONPROC|ANONPROCEDURE|ANONYMOUSP|ANONYMOUSPROC|ANONYMOUSPROCEDURE) (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(AS) *?\n+((.|\n)*?)END (PROCEDURE|PROC))|(ANONF|ANONFUNC|ANONFUNCTION|ANONYMOUSF|ANONYMOUSFUNC|ANONYMOUSFUNCTION) (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN .*)) (WITH .+)?))
quit       = QUIT ([a-zA-Z_][a-zA-Z0-9_]*)?
require    = REQUIRE (official(\.python3?)?|python3?)

if         = IF .+? DO *?\n+((\t| )*.+|\n*)+?\n*((\t| )*ELSE IF .+? DO *?\n+((\t| )*.+|\n*)+?\n*)*((\t| )*ELSE DO *?\n+((\t| )*.+|\n*)+?)?\n*(\t| )*END IF
function   = (FUNCTION|FUNC) ([a-zA-Z_][a-zA-Z0-9_]*) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) (.+?))+?)?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) AS *?\n+((.|\n)*?)\n(\t| )*?(RETURN .*)
procedure   = ((PROCEDURE|PROC) ([a-zA-Z_][a-zA-Z0-9_]*) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) .+?)+?)?AS *?\n+(.|\n)*?(END (PROCEDURE|PROC)))
lamda_func  = (ANONF|ANONFUNC|ANONFUNCTION|ANONYMOUSF|ANONYMOUSFUNC|ANONYMOUSFUNCTION) (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN .*)
lamda_proc  = (ANONP|ANONPROC|ANONPROCEDURE|ANONYMOUSP|ANONYMOUSPROC|ANONYMOUSPROCEDURE) (\[(([a-zA-Z_][a-zA-Z0-9_]*)  ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(AS) *?\n+((.|\n)*?)END (PROCEDURE|PROC)
set         = SET ([a-zA-Z_][a-zA-Z0-9_]*?) TO (((ANONP|ANONPROC|ANONPROCEDURE|ANONYMOUSP|ANONYMOUSPROC|ANONYMOUSPROCEDURE) (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(AS) *?\n+((.|\n)*?)END (PROCEDURE|PROC))|(ANONF|ANONFUNC|ANONFUNCTION|ANONYMOUSF|ANONYMOUSFUNC|ANONYMOUSFUNCTION) (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN .*)|.*)
for         = FOR ([a-zA-Z_][a-zA-Z0-9_]*) OF (.*?) DO *?\n+?((.|\n)*?)\n(\t| )*?END FOR
while       = WHILE (.*?) DO *?\n+?((.|\n)*?)\n(\t| )*?END WHILE

comment    = /\*(.|\n)*?\*/|//.*
string_lit = (["']).*?(?<!\\)\1|(RAW|PLAINTEXT) (.*)
variable name   = [a-zA-Z_][a-zA-Z0-9_]*
number_lit      = (\+|\-)?(\d+(\.\d+)?)+?((\+|\-)?(\d+(\.\d+)?)?i)?|((\+|\-)(\d+(\.\d+)?)?i)+
basic_type      = (STR|Str|str|STRING|String|string|INT|Int|int|INTEGER|Integer|integer|FLOAT|Float|float|REAL|Real|real|NUMBER|Number|number|BOOL|Bool|bool|BOOLEAN|Boolean|boolean|COMPLEX|Complex|complex|LIST|List|list|ARRAY|Array|array|TUPLE|Tuple|tuple|DICT|Dict|dict|DICTIONARY|Dictionary|dictionary|MAP|Map|map|MAPPING|Mapping|mapping)
basic_constants = (TRUE|True|true|FALSE|False|false|NULL|Null|null|NONE|None|none|INFINITY|Infinity|infinity|INF|Inf|inf|NAN|Nan|nan|IS_MAIN_FILE|I_AM_MAIN_FILE|MAIN_FILE|IS_MAIN|THIS_IS_MAIN_FILE|_INTERPRETER)
boolean_ops     = (IS|≣|≡)|(NOT|!)|(=|==)|(!=|=/=|≠)|(<|≨|≱)|(>|≩|≰)|(<=|≤|⩽|≦|≯)|(>=|≥|⩾|≧|≮)|(AND|&&)|(OR|\|\|)
decimal_ops     = (*|**|/|//|+|-|%)
bitwise_ops     = (^|&|\||<<|>>)


lazy expression = ((\t| )*.+|\n*)+?