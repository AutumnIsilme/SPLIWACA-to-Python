(*COMMENT

The following is a slightly modified form of EBNF grammar notation.

`*` indicates repeat the preceding group 0 or more times
`+` indicates repeat the preceding group 1 or more times
`?` indicates that the preceding group is optional

*)

(*
Entry point is the root of the tree.

Lambdas, Calls, Casts, Create, Raw are expressions - they can be part of another statement.
Functions, procedures, i/o, Require, Inc/Dec, If, for, while, struct are statements.

string boolean_op string
*)

(*LL(3) GRAMMAR, probably*)

entry_point = (require, '\n')?, statements, EOF;

statements = '\n'+, (statement, ('\n'+, statement)*, '\n')?;
statement = if|set|input|output|increment|decrement|for|while|quit|call|function|procedure|struct|return;

expr = boolean_expr|create|cast|call|anonf|anonp;

list = dict_entry, ('\n'?, ',', '\n'?, dict_entry)+;
dict_entry = expr, ':', expr;
(* dict = atom, ':', atom, ('\n'?, ',', '\n'?, atom, ':', atom)*; *)

(*Arithmetic expressions: *)
boolean_expr = (add_expr, (boolean_op add_expr)*)|
                   (('NOT'|'!'), boolean_expr);
add_expr = mul_expr, ['+'|'-', add_expr]; (* -> 1 + 1 + 1 + - 1 *)
mul_expr = divmod_expr, ['*'|'/', mul_expr];
divmod_expr = power, ['%'|'DIVI', divmod_expr];
power = factor, ['**', factor];
factor = ['+'|'-'], atom;
atom = (string|raw|int|float|complex|identifier|('(', list, ')')), list_access?;

list_access = ('[', expr, ']')*;

number = int|float|complex|identifier;
string = string|raw|identifier;
identifier = (letter|'_')+, ('.', (letter|'_')+)*;
type = identifier|"INT" | "Int" | "int" | "INTEGER" | "Integer" | "integer" | "FLOAT" | "Float" | 
        "float" | "REAL" | "Real" | "real" | "NUMBER" | "Number" | "number" | "COMPLEX" | "Complex" |
        "complex" | "STRING" | "String" | "string" | "STR" | "Str" | "str" | "DICT" | "Dict" |   
        "dict" | "DICTIONARY" | "Dictionary" | "dictionary" | "MAP" | "Map" | "map" | "MAPPING" |
        "Mapping" | "mapping" | "LIST" | "List" | "list" | "ARRAY" | "Array" | "array" | "TUPLE" |  
        "Tuple" | "tuple";

(*Other expressions: *)
create = 'CREATE', ident, ['WITH', expr, (',', expr)*];
cast = 'CAST', type, list;
call = 'CALL', expr, ['WITH', expr, (',', expr)*];
anonf = 'ANONF', (('<-'|'TAKES'), type, identifier, (',', type, identifier)*)?, ('->'|'RETURNS'), type, 'AS', '\n'+, statements, '\n'+, 'END FUNCTION\n';
anonp = 'ANONP', (('<-'|'TAKES'), type, identifier, (',', type, identifier)*)?, 'AS', '\n', statements, 'END PROCEDURE';


(*Statements: *)
if = 'IF', boolean_expr, 'DO', statements, ('ELSE IF', boolean_expr, 'DO', statements)*,('ELSE', statements)?,'END IF\n';
set = 'SET', identifier, 'TO', list;
input = 'INPUT', ((sign_specifier, type)|type), identifier;
output = 'OUTPUT', raw;
increment = 'INC', identifier;
decrement = 'DEC', identifier;
for = 'FOR', identifier, 'OF', expr, 'DO\n', statements, '\nEND FOR';
while = 'WHILE', boolean_expr, 'DO\n', statements, '\nEND WHILE';
quit = 'QUIT', atom;
require = 'REQUIRE', interpreter_name;

struct = 'STRUCT', identifier, 'AS\n', (type, identifier, ('\n,'|','|',\n'|'\n,\n'))+, '\nEND STRUCTURE';

function = ('FUNCTION', identifier, (('<-'|'TAKES'), type, identifier, ['WITH DEFAULT', value], (',', type, identifier, ['WITH DEFAULT', value],)*)?, ('->'|'RETURNS'), type, 'AS', '\n', statements, '\n'+, 'END FUNCTION\n');

procedure = 'PROCEDURE', identifier, (('<-'|'TAKES'), type, identifier, ['WITH DEFAULT', value], (',', type, identifier, ['WITH DEFAULT', value],)*)?, 'AS', '\n', statements, 'END PROCEDURE';

return = 'RETURN', expr;

(* Meta: *)
program = entry_point+ (* This means that we can include other files. *)