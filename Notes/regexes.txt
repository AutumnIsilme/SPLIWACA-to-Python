input      = INPUT (STR|Str|str|STRING|String|string|INT|Int|int|INTEGER|Integer|integer|FLOAT|Float|float|REAL|Real|real|NUMBER|Number|number|BOOL|Bool|bool|BOOLEAN|Boolean|boolean|COMPLEX|Complex|complex) ([a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])*)
output     = OUTPUT ((\$[a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])*)|[^ \n]*?)
create     = CREATE ([a-zA-Z_][a-zA-Z0-9_]*) (WITH (.*? )+)?
cast       = CAST ([a-zA-Z_][a-zA-Z0-9_]*) .*
call       = CALL (([a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])* (WITH .+)?)|((((ANONP|ANONPROC|ANONPROCEDURE|ANONYMOUSP|ANONYMOUSPROC|ANONYMOUSPROCEDURE) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?)*?(AS) *?\n+((.|\n)*?)END (PROCEDURE|PROC))|(ANONF|ANONFUNC|ANONFUNCTION|ANONYMOUSF|ANONYMOUSFUNC|ANONYMOUSFUNCTION) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?)*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN .*)) (WITH .+)?))
quit       = QUIT( .*)?
require    = REQUIRE (official(\.python3?)?|python3?)

if         = IF (.*?) DO *?\n+?(((.|\n)*?\n)( |\t)*?(ELSE IF (.*?) DO *?\n+?((.|\n)*?\n)( |\t)*?)*?(ELSE DO *?\n+?((.|\n)*?\n)( |\t)*?)*?)(END IF)
function   = ((FUNCTION|FUNC) ([a-zA-Z_][a-zA-Z0-9_]*) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) (.+?))+?)?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) AS *?\n+((.|\n)*?)\n(\t| )*?(RETURN (.*)))
procedure   = ((PROC(EDURE)?) ([a-zA-Z_][a-zA-Z0-9_]*) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) .+?)+?)?AS *?\n+(.|\n)*?(END PROCEDURE))
lamda_func  = ANON(YMOUS)?F(UNC(TION)?)? (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?)*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN ([^ \n\t]*))
lamda_proc  = ANON(YMOUS)?P(ROC(EDURE)?)? (TAKES (([a-zA-Z_][a-zA-Z0-9_]*)  ([a-zA-Z_][a-zA-Z0-9_]*) )+?)*?(AS) *?\n+((.|\n)*?)END PROCEDURE
struct      = (STRUCTURE|STRUCT) ([a-zA-Z_][a-zA-Z0-9_]*) AS *?\n+?((\t| )*([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) *?\n)*? *?\n*?(\t| )*?END (STRUCTURE|STRUCT)
set         = SET ([a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])*) TO (((ANONP|ANONPROC|ANONPROCEDURE|ANONYMOUSP|ANONYMOUSPROC|ANONYMOUSPROCEDURE) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?)*?(AS) *?\n+((.|\n)*?)END (PROCEDURE|PROC))|(ANONF|ANONFUNC|ANONFUNCTION|ANONYMOUSF|ANONYMOUSFUNC|ANONYMOUSFUNCTION) (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN .*)|.*)
for         = FOR (.*?) OF (.*?) DO *?\n+?((.|\n)*?)\n(\t| )*?END FOR
while       = WHILE (.*?) DO *?\n+?((.|\n)*?)\n(\t| )*?END WHILE

comment     = /\*(.|\n)*?\*/|//.*
string_lit  = (["']).*?(?<!\\)\1|(RAW|PLAINTEXT) (.*)
identifier  = [a-zA-Z_][a-zA-Z0-9_]*
index_ident = [a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])*
number_lit  = (\+|\-)?(\d+(\.\d+)?)+?((\+|\-)?(\d+(\.\d+)?)?i)?|((\+|\-)(\d+(\.\d+)?)?i)+
basic_type  = (STR|Str|str|STRING|String|string|INT|Int|int|INTEGER|Integer|integer|FLOAT|Float|float|REAL|Real|real|NUMBER|Number|number|BOOL|Bool|bool|BOOLEAN|Boolean|boolean|COMPLEX|Complex|complex|LIST|List|list|ARRAY|Array|array|TUPLE|Tuple|tuple|DICT|Dict|dict|DICTIONARY|Dictionary|dictionary|MAP|Map|map|MAPPING|Mapping|mapping)
basic_constants = (TRUE|True|true|FALSE|False|false|NULL|Null|null|NONE|None|none|INFINITY|Infinity|infinity|INF|Inf|inf|NAN|Nan|nan|IS_MAIN_FILE|I_AM_MAIN_FILE|MAIN_FILE|IS_MAIN|THIS_IS_MAIN_FILE|_INTERPRETER)
boolean_ops  = (IS|≣|≡)|(!=|=/=|≠)|(NOT|!)|(=|==)|(<=|≤|⩽|≦|≯)|(>=|≥|⩾|≧|≮)|(<|≨|≱)|(>|≩|≰)|(AND|&&)|(OR|\|\|)
decimal_ops  = ((*)|(**)|(/)|(DIVI)|(+)|(-)|(%))
bitwise_ops  = ((^)|(&)|(\|)|(<<)|(>>))

COMBINATIONS:
func+proc+struct = ((PROCEDURE|PROC) ([a-zA-Z_][a-zA-Z0-9_]*) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) .+?)+?)?AS *?\n+((.|\n)*?)(END (PROCEDURE|PROC)))|((FUNCTION|FUNC) ([a-zA-Z_][a-zA-Z0-9_]*) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) (.+?))+?)?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) AS *?\n+((.|\n)*?)\n(\t| )*?(RETURN (.*)))|((STRUCTURE|STRUCT) ([a-zA-Z_][a-zA-Z0-9_]*) AS *?\n+?(((\t| )*([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) *?\n)*?) *?\n*?(\t| )*?END (STRUCTURE|STRUCT))
if+loop+anonfp   = (IF (.*?) DO *?\n+?(((.|\n)*?\n)( |\t)*?(ELSE IF (.*?) DO *?\n+?((.|\n)*?\n)( |\t)*?)*?(ELSE DO *?\n+?((.|\n)*?\n)( |\t)*?)*?)(END IF))|(FOR ([a-zA-Z_][a-zA-Z0-9_]*) OF (.*?) DO *?\n+?((.|\n)*?)\n(\t| )*?END FOR)|(WHILE (.*?) DO *?\n+?((.|\n)*?)\n(\t| )*?END WHILE)|((SET ([a-zA-Z_][a-zA-Z0-9_]*) TO (CALL )?)|(CALL ))((ANON(YMOUS)?F(UNC(TION)?)? ((TAKES ([a-zA-Z_][a-zA-Z0-9_]*?) ([a-zA-Z_][a-zA-Z0-9_]*? )))?(RETURNS|->) ([a-zA-Z_][a-zA-Z0-9_]*) AS *?\n*?((.|\n)*?)\n(\t| )*?RETURN (.*?)( WITH (.*)))|(ANON(YMOUS)?P(ROC(EDURE)?)? ((TAKES ([a-zA-Z_][a-zA-Z0-9_]*?) ([a-zA-Z_][a-zA-Z0-9_]*? )))?AS *?\n*?((.|\n)*?)\n(\t| )*?END (PROCEDURE|PROC))( WITH (.*))?)
create+cast+set+call = (SET ([a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])*) TO (((ANONP|ANONPROC|ANONPROCEDURE|ANONYMOUSP|ANONYMOUSPROC|ANONYMOUSPROCEDURE) (TAKES (([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?)*?(AS) *?\n+((.|\n)*?)END (PROCEDURE|PROC))|ANON(YMOUS)?F(UNC(TION)?)? (\[(([a-zA-Z_][a-zA-Z0-9_]*) ([a-zA-Z_][a-zA-Z0-9_]*) )+?\])*?(\->|RETURNS) ([a-zA-Z_][a-zA-Z0-9_]*) (AS) *?\n+((.|\n)*?)(RETURN .*)|.*))|(CREATE ([a-zA-Z_][a-zA-Z0-9_]*) ?(WITH (.*))?)|(CAST ([a-zA-Z_][a-zA-Z0-9_]*) (.*)))
output_variable   = \$[a-zA-Z_][a-zA-Z0-9_]*(\[[0-9]*\])*
operators = (IS|≣|≡)|(<<)|(>>)|(!=|=/=|≠)|(NOT|!)|(=|==)|(<=|≤|⩽|≦|≯)|(>=|≥|⩾|≧|≮)|(<|≨|≱)|(>|≩|≰)|(AND|&&)|(OR|\|\|)|(*)|(**)|(/)|(DIVI)|(+)|(-)|(%)|(^)|(&)|(\|)


OTHER STUFF:
lazy expression = ((\t| )*.+|\n*)+?