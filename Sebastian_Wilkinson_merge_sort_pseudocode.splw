REQUIRE python

FUNCTION insertion_merge <- LIST list1, LIST list2 -> LIST AS
	SET rv TO CREATE LIST
	SET list1_i TO 0
	SET list2_i TO 0
	FOR i OF _INTERPRETER.range(list1.length + list2.length) DO
		IF list1[list1_i] > list2[list2_i] DO
			SET rv[i] TO list2[list2_i]
			INC list2_i
		ELSE DO
			SET rv[i] TO list1[list1_i]
			INC list1_i
		END IF
	END FOR
RETURN rv

FUNCTION merge_sort_that_is_not_actually_merge_sort_and_also_doesnt_work <- LIST unsorted -> LIST AS
	SET rv TO CREATE LIST
	IF unsorted.length == 1 DO
		SET rv TO unsorted
	END IF
	FOR i OF _INTERPRETER.range(unsorted.length) DO
		SET unsorted[i] TO CREATE LIST WITH unsorted[i]
	END FOR
	SET i TO 0
	WHILE True DO
		IF i+1 != unsorted.length DO
			SET unsorted[i] TO CALL insertion_merge WITH unsorted[i], unsorted[i+1]
			CALL unsorted.pop WITH i+1
		END IF
		INC i
		IF i == unsorted.length DO
			BREAK
		END IF
	END WHILE
	IF rv.length == 0 DO
		SET rv TO unsorted
	END IF
RETURN rv

FUNC merge_sort <- LIST unsorted -> LIST AS
	IF unsorted.length == 1 DO
		RETURN unsorted
	END IF
	SET divider TO unsorted.length DIVI 2
	SET left TO unsorted[:divider]
	SET right TO unsorted[divider:]
	SET left TO CALL merge_sort WITH left
	SET right TO CALL merge_sort WITH right
	SET rv TO CREATE LIST
	WHILE left.length AND right.length DO
		IF left[0] > right[0] DO
			CALL rv.append WITH right[0]
			CALL right.pop WITH 0
		ELSE
			CALL rv.append WITH left[0]
			CALL left.pop WITH 0
		END IF
	END WHILE
	IF right.length DO
		FOR element OF right DO
			CALL rv.append WITH element
		END FOR
	ELSE IF left.length
		FOR element OF left DO
			CALL rv.append WITH element
		END FOR
	END IF
	RETURN rv
END FUNCTION

FUNCTION bubble_sort <- LIST unsorted -> LIST AS
	SET swaps TO 0
	WHILE True DO
		FOR i OF _INTERPRETER.range(unsorted.length-1) DO
			IF unsorted[i] > unsorted[i+1] DO
				SET tmp TO unsorted[i]
				SET unsorted[i] TO unsorted[i+1]
				SET unsorted[i+1] TO tmp
				INC swaps
			END IF
		END FOR
		IF swaps == 0 DO
			BREAK
		ELSE DO
			SET swaps TO 0
		END IF
	SET rv TO unsorted //Now sorted
RETURN rv
